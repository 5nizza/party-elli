INFO {
  TITLE:       "Full Arbiter, unrealizable variant 1"
  DESCRIPTION: "Parameterized Arbiter, where no spurious grants are allowed"
  SEMANTICS:   Mealy
  TARGET:      Mealy
}

GLOBAL {
  PARAMETERS {
    n = 2;
    u = 2;
  }

  DEFINITIONS {
    // ensures mutual exclusion on an n-ary bus
    mutual_exclusion(bus) =
     mone(bus,0,(SIZEOF bus) - 1);

    // ensures that none of the signals
    // bus[i] - bus[j] is HIGH
    none(bus,i,j) =
      &&[i <= t <= j]
        !bus[t];

    // ensures that at most one of the signals
    // bus[i] - bus[j] is HIGH
    mone(bus,i,j) =
    i > j : false
    i == j : true
    i < j :
      // either no signal of the lower half is HIGH and at 
      // most one signal of the upper half is HIGH
      (none(bus, i, m(i,j)) && mone(bus, m(i,j) + 1, j)) ||
      // or at most one signal of the lower half is HIGH
      // and no signal in of the upper half is HIGH
      (mone(bus, i, m(i,j)) && none(bus, m(i,j) + 1, j));

    // returns the position between i and j
    m(i,j) = (i + j) / 2;
  } 
}

MAIN {

  INPUTS {
    r[n]; // request signals
  } 

  OUTPUTS {
    g[n]; // grant signals
  }

  INVARIANTS {
    // no spurious grants
    &&[0 <= i < n] (
      (g[i] && G !r[i] -> F !g[i]) &&
      (g[i] && X (!r[i] && !g[i]) -> X (r[i] R !g[i]))
    );

    // ensure mutual exclusion on the output bus
    mutual_exclusion(g);   
      
    /* Making the benchmark unrealizable: ask for two grants at the same time, 
     * after u steps.
     */
    &&[0 <= i <n] ( &&[i < j < n] (r[i] && X r[j] -> 
      X[u] (g[i] && g[j])) ); 
  }

  GUARANTEES {
    &&[0 <= i < n] (
      // no grant before any request    
      (r[i] R !g[i]) && 
      // every request is eventually granted    
      G (r[i] -> F g[i])
    );
  }
  
}

