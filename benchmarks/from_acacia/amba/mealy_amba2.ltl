  ###############
  [spec_unit u1]
  ###############
  assume (G ((!( (hmastlock=1) * ( (!(hburst0=1)) * (hburst1=1)) * ( (!(hmaster0=1))))) + (X (F (!(hbusreq0=1))))));
  assume (G ((!( (hmastlock=1) * ( (!(hburst0=1)) * (hburst1=1)) * ( (hmaster0=1)))) + (X (F (!(hbusreq1=1))))));
  assume (G (F (hready=1))) * (G ((!(hlock0=1)) + (hbusreq0=1))) * (G ((!(hlock1=1)) + (hbusreq1=1)));
  assume (!(hbusreq0=1)) * (!(hlock0=1)) * (!(hbusreq1=1)) * (!(hlock1=1)) * (!(hready=1));
  
  (G ((hready=1) + (X (!(start=1)))));
  (G ((!( (hmastlock=1) * ( (!(hburst0=1)) * (hburst1=1)) * (start=1) * ( (!(hmaster0=1))))) + (X ((!(start=1)) U (!(hbusreq0=1))))));
  (G ((!( (hmastlock=1) * ( (!(hburst0=1)) * (hburst1=1)) * (start=1) * ( (hmaster0=1)))) + (X ((!(start=1)) U (!(hbusreq1=1))))));
  (G ((!( (hmastlock=1) * ( (hburst0=1) * (hburst1=1)) * (start=1))) + ( (hready=1) * (X ((!(start=1)) U ( (hready=1) * (X ((!(start=1)) U ( (hready=1) * (X ((!(start=1)) U ( (hready=1))))))))))) + ( (!(hready=1)) * (X ((!(start=1)) U ( (hready=1) * (X ((!(start=1)) U ( (hready=1) * (X ((!(start=1)) U ( (hready=1) * (X ((!(start=1)) U ( (hready=1))))))))))))))));
  
  ###############
  [spec_unit u2]
  ###############
  assume (G ((!( (hmastlock=1) * ( (!(hburst0=1)) * (hburst1=1)) * ( (!(hmaster0=1))))) + (X (F (!(hbusreq0=1))))));
  assume (G ((!( (hmastlock=1) * ( (!(hburst0=1)) * (hburst1=1)) * ( (hmaster0=1)))) + (X (F (!(hbusreq1=1))))));
  assume (G (F (hready=1))) * (G ((!(hlock0=1)) + (hbusreq0=1))) * (G ((!(hlock1=1)) + (hbusreq1=1)));
  assume (!(hbusreq0=1)) * (!(hlock0=1)) * (!(hbusreq1=1)) * (!(hlock1=1)) * (!(hready=1));
  
  (G ((!( (hmastlock=1) * ( (hburst0=1) * (hburst1=1)) * (start=1))) + ( (hready=1) * (X ((!(start=1)) U ( (hready=1) * (X ((!(start=1)) U ( (hready=1) * (X ((!(start=1)) U ( (hready=1))))))))))) + ( (!(hready=1)) * (X ((!(start=1)) U ( (hready=1) * (X ((!(start=1)) U ( (hready=1) * (X ((!(start=1)) U ( (hready=1) * (X ((!(start=1)) U ( (hready=1))))))))))))))));
  (G ((!(hready=1)) + ((hgrant0=1) <-> (X ( (!(hmaster0=1)))))));
  (G ((!(hready=1)) + ((hgrant1=1) <-> (X ( (hmaster0=1))))));
  G ((!(hready=1)) + ((locked=1) <-> ((hmastlock=1))));
  (G ((!(X (!(start=1)))) + (( (!(hmaster0=1))) <-> (X ( (!(hmaster0=1)))))));
  (G ((!(X (!(start=1)))) + (( (hmaster0=1)) <-> (X ( (hmaster0=1))))));
  G ((!(X (!(start=1)))) + ((hmastlock=1) <-> ((hmastlock=1))));
  
  ###############
  [spec_unit u3]
  ###############
  assume (G ((!( (hmastlock=1) * ( (!(hburst0=1)) * (hburst1=1)) * ( (!(hmaster0=1))))) + (X (F (!(hbusreq0=1))))));
  assume (G ((!( (hmastlock=1) * ( (!(hburst0=1)) * (hburst1=1)) * ( (hmaster0=1)))) + (X (F (!(hbusreq1=1))))));
  assume (G (F (hready=1))) * (G ((!(hlock0=1)) + (hbusreq0=1))) * (G ((!(hlock1=1)) + (hbusreq1=1)));
  assume (!(hbusreq0=1)) * (!(hlock0=1)) * (!(hbusreq1=1)) * (!(hlock1=1)) * (!(hready=1));
  
  (G ((!( (decide=1) * (X (hgrant0=1)))) + ((hlock0=1) <-> (locked=1))));
  (G ((!( (decide=1) * (X (hgrant1=1)))) + ((hlock1=1) <-> (locked=1))));
  (G ((!(decide=1)) + ((hgrant0=1) <-> (X (hgrant0=1)))));
  (G ((!(decide=1)) + ((hgrant1=1) <-> (X (hgrant1=1)))));
  (G ((!(decide=1)) + ((locked=1) <-> (X (locked=1)))));
  (G ((!(hbusreq0=1)) + (F ((!(hbusreq0=1)) + ( (!(hmaster0=1)))))));
  (G ((!(hbusreq1=1)) + (F ((!(hbusreq1=1)) + ( (hmaster0=1))))));
  (G ((hgrant1=1) + (G (!(hgrant1=1))) + ((!(hgrant1=1)) U (hbusreq1=1))));
  (G ((!(decide=1)) + (hbusreq0=1) + (hbusreq1=1) + (X (hgrant0=1))));
  (decide=1);
  (start=1);
  (hgrant0=1);
  ( (!(hmaster0=1)));
  (!(hmastlock=1));
  (!(hgrant1=1));
  
  group_order = FLAT;