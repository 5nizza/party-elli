#variable 'active' is always present
#variable 'tok' is always present

# next operators here work also if do not rewrite them into local versions (atm, Party does not support rewriting)

[INPUT_VARIABLES]
# hready,hburst[0,1] are really global variables 

# incr is:  hburst0,1 = 0,1
# burst is: hburst0,1 = 1,1 
# non-incr, non-burst means 'single' 
hready;
hbusreq;
hburst0;
hburst1;
hlock;
noreq;


[OUTPUT_VARIABLES]
# hmastlock,hmaster[0..n],locked,decide,start are really global variables
# all except hmaster can be modeled as an "or" over local variables
# hmaster can be modeled as a special variable that gives the value/id of the unique process for which local variable is high
# in this variant, we LOCALIZE all auxiliary variables 
hmastlock;
hmaster;
hgrant;
start;
decide;
locked;


[ASSUMPTIONS]
# A1: hbusreq is eventually lowered  # active is needed here -- otherwise hbusreq is lowered but we will not react to it
Forall (i) G ( (hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * hmaster_i=1) -> X(F(hbusreq_i=0 * active_i=1)) );

# A2: hready will eventually be high and visible
Forall (i) G (F (hready_i=1 * active_i=1));

# A3: hlock is low if hbusreq is low
Forall (i) G ((hlock_i=1) -> (hbusreq_i=1));

# A4: initial inputs are all low 
Forall (i) (hbusreq_i=0) * (hlock_i=0) * (hready_i=0);


# new global variable: works in case of 
Forall (i) G (hbusreq_i=1 -> noreq_i=0);

# might make sense when they interleave
# Forall (i) G (F(noreq_i=0 * hready_i=1));


######## SHORTCUT TO REMOVE SOME OF GUARANTEES  ######

# Forall (i) G (noreq_i=0);

# Forall (i) X(G(hready_i=1));

# Forall (i) X(G(hbusreq_i=1));

Forall (i) G(hburst0_i=1);
Forall (i) G(hburst1_i=1);

# Forall (i) X(G(hlock_i=1));
Forall (i) G(hbusreq_i=1 -> hlock_i=1);



[GUARANTEES]

# G1: start is never high when hready is low
Forall (i) 
G ((hready_i=0 * active_i=1) -> X (start_i=0));

# G2: incremental bursts last until hbusreq is lowered
Forall (i) 
G ((hmastlock_i=1 * hburst0_i=0 * hburst1_i=1 * start_i=1 * active_i=1) 
  -> 
  X ((start_i=0) W (start_i=0 * hbusreq_i=0 * active_i=1)));


# G3: REDUCED 
Forall (i) 
G ((hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=1 * active_i=1) 
  ->
  X(
    (start_i=0) W 
            (start_i=0 * hready_i=1 * active_i=1 * X((start_i=0) W 
            (start_i=0 * hready_i=1 * active_i=1)))
   )
  );

Forall (i) 
G ((hmastlock_i=1 * hburst0_i=1 * hburst1_i=1 * start_i=1 * hready_i=0 * active_i=1) 
  ->
  X(
    (start_i=0) W 
            (start_i=0 * hready_i=1 * active_i=1 * X((start_i=0) W 
            (start_i=0 * hready_i=1 * active_i=1 * X((start_i=0) W 
            (start_i=0 * hready_i=1 * active_i=1)))))
   )
  );




# G4: update hmaster on hready 
Forall (i) G ((hready_i=1 * active_i=1) -> ((hgrant_i=1) <-> X(hmaster_i=1)));

# G5: update locked on hready
Forall (i) G ((hready_i=1 * active_i=1) -> ((locked_i=1) <-> X(hmastlock_i=1)));

# G6: set start if we change hmaster or hmastlock 
Forall (i) G (X(start_i=0) -> ((hmaster_i=1) <-> X(hmaster_i=1)));
Forall (i) G (X(start_i=0) -> ((hmastlock_i=1) <-> X(hmastlock_i=1)));

# G7: if we give a new hgrant, need to update locked with input hlock 
# we need active_i here, otherwise -- hlock can arrive when not scheduled and hence at the next moment there will be no way to recall what was hlock atm before
Forall (i) G ((decide_i=1 * active_i=1 * X(hgrant_i=1)) -> ((hlock_i=1) <-> X(locked_i=1)));

# G8: set decide if we change hgrant or locked   # not sure if need active_i here 
Forall (i) G ((decide_i=0 * active_i=1) -> (hgrant_i=1 <-> X(hgrant_i=1))); 
Forall (i) G ((decide_i=0 * active_i=1) -> (locked_i=1 <-> X(locked_i=1))); 

# G9: every hbusreq is either lowered or answered  # no need for active here because either: 
                                                   # - req goes low (and we haven't noticed these reqs at all), or 
                                                   # - req stays high till req*active, which should be granted -- also possible that then req is lowered but then again -- either it stays low till we notice it, or it goes down when !active and up when active, but then we need to grant it 
Forall (i) G (hbusreq_i=1 -> F(hbusreq_i=0 + hmaster_i=1));

# G10: no grants without requests (without exception for now)    # put active here just in case
# (exception can be modeled with additional input "no_hbusreq" and synthesis of a special process template for process 0)
# Forall (i) G (hgrant_i=0 -> ((hgrant_i=0) W (active_i=1 * hbusreq_i=1)));

# G10 for 0-process:
# Forall (i) G(decide_i=1 * noreq_i=1 * prev_i=1 -> X(hgrant_i=1));
Forall (i) G(noreq_i=1 * prev_i=1 -> X(hgrant_i=1));


# G11: initial output values:
# modified -- removed start, decide
# Forall (i) (hgrant_i=0 * hmaster_i=0 * hmastlock_i=0);

# G11 for the 0-process
Forall (i) (tok_i=1 -> hgrant_i=1 * hmaster_i=1 * hmastlock_i=0);
Forall (i) (tok_i=0 -> hgrant_i=0 * hmaster_i=0 * hmastlock_i=0);

# additional token guarantee: only give hgrant if we have token
Forall (i) G (hgrant_i=1 -> tok_i=1);
